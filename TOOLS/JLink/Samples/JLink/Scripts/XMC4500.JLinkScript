/*********************************************************************
*              SEGGER MICROCONTROLLER GmbH & Co. K.G.                *
*        Solutions for real time microcontroller applications        *
**********************************************************************
*                                                                    *
*        (c) 2012 SEGGER Microcontroller GmbH & Co. KG               *
*                                                                    *
* Internet: www.segger.com Support: support@segger.com               *
*                                                                    *
**********************************************************************
----------------------------------------------------------------------
Purpose : J-Link script file for Infineon XMC4500.
---------------------------END-OF-HEADER------------------------------
*/

/*********************************************************************
*
*       _StoreSelDP
*/
void _StoreSelDP(void) {
  JTAG_StoreIR(0xA);  // DPACC command
  JTAG_StoreClocks(1);
}

/*********************************************************************
*
*       _StoreSelAP
*/
void _StoreSelAP(void) {
  JTAG_StoreIR(0xB);  // APACC command
  JTAG_StoreClocks(1);
}

/*********************************************************************
*
*       _StoreTriggerReadAPDPReg
*
*  Function description
*    Triggers a read of an AP or DP register. Depends on the previous command (DPACC / APACC)
*/
int _StoreTriggerReadAPDPReg(unsigned int RegIndex) {
  __int64 v;        // We need 35 bits: 32 data, 2 bit addr, 1 bit RnW
  int BitPosData;
  //
  // Write 35 bits (32 bits data, 2 bits addr, 1 bit RnW)
  //
  v = 0;
  v |= 1;                // 1 indicates read access
  v |= (RegIndex << 1);
  BitPosData = JTAG_StoreDR(v, 35);
  JTAG_StoreClocks(8);
  return BitPosData;
}

/*********************************************************************
*
*       _StoreWriteAPDPReg
*
*  Function description
*    Writes an AP or DP register. Depends on the previous command (DPACC / APACC)
*/
int _StoreWriteAPDPReg(unsigned int RegIndex, __int64 Data) {
  __int64 v;        // We need 35 bits: 32 data, 2 bit addr, 1 bit RnW
  int BitPosData;
  //
  // Write 35 bits (32 bits data, 2 bits addr, 1 bit RnW)
  //
  v = 0;   // 0 indicates write access
  v |= (RegIndex << 1);
  v |= (Data << 3);
  BitPosData = JTAG_StoreDR(v, 35);
  JTAG_StoreClocks(8);
  return BitPosData;
}

/*********************************************************************
*
*       _ResetAndHaltOnConnect
*
*  Function description
*    Performs a reset of the target device via reset pin and halts the target after reset.
*    Only necessary on first connect to make sure that the device latches specific states of TMS & TCK on RESET release.
*/
void _ResetAndHaltOnConnect(void) {
  int Ctrl;
  int Speed;

  Speed = JTAG_Speed;
  JTAG_Speed = 100;
  //
  // XMC4500 expects TMS and TCK in defined states after reset release
  // to choose in which mode it should boot
  // TCK TMS Mode
  //  0   0  ASC BSL enabled
  //  0   1  Normal mode, JTAG                  <-- This is what we need
  //  1   0  CAN BSL enabled
  //  1   1  BMI customized boot enabled
  //
  JTAG_ResetPin = 0;
  SYS_Sleep(20);                 // Give rst pin some time to get LOW
  JTAG_TCKPin   = 0;
  JTAG_TMSPin   = 1;
  JTAG_TDIPin   = 0;
  JTAG_ResetPin = 1;
  SYS_Sleep(20);                 // Give rst pin some time to get HIGH. Also give the bootloader enough time to enable the debug interface
  //
  // Power up system and send halt sequence
  // According to XMC4500 manual, powering up the debug port and setting C_DEBUGEN in DHCSR can be done in one sequence
  // so we do...
  //
  JTAG_Store(0x1F, 0, 6);  // Perform TAP reset to bring TAP controller into a known state
  _StoreSelDP();
  Ctrl = 0
       | (1 << 30)     // System power-up
       | (1 << 28)     // Debug popwer-up
       | (1 << 5)      // Clear STICKYERR
       ;
  _StoreWriteAPDPReg(1, Ctrl);
  _StoreWriteAPDPReg(2, (0 << 24));      // Select AP[0] bank 0
  _StoreSelAP();
  Ctrl = 0
       | (1 << 29)
       | (3 << 24)
       | (2 <<  0)                       // Word access
       ;
  _StoreWriteAPDPReg(0, Ctrl);           // AHB-AP CSW, word access, no auto-increment
  _StoreWriteAPDPReg(1, 0xE000EDF0);     // AHB-AP TAR, DHCSR
  _StoreWriteAPDPReg(3, 0xA05F0003);     // AHB-AP DRW, DHCSR data: Key, C_DEBUGEN, C_HALT, C_MASKINTS = 0
  _StoreWriteAPDPReg(1, 0x5000413C);     // AHB-AP TAR, PETE
  _StoreWriteAPDPReg(3, 0x00000000);     // AHB-AP DRW, PETE: Disable all parity traps
  JTAG_WriteClocks(1);                   // Make sure that JTAG buffer is empty
  JTAG_Speed = Speed;                    // Restore original JTAG speed
}

/*********************************************************************
*
*       ResetTarget
*
*  Function description
*    Performs a reset of the target device and halts the target after reset (expected by the DLL)
*     This function is called instead of the reset strategy in the J-Link DLL
*/
void ResetTarget(void) {
  int Speed;
  int Ctrl;
  int ResetAddr;
  int v;
  int BPCompValue;
  int BitPos;

  Speed = JTAG_Speed;
  JTAG_Speed = 100;
  Report("J-Link script: Performing system reset");
  _StoreSelAP();
  Ctrl = 0
       | (1 << 29)
       | (3 << 24)
       | (2 <<  0)                       // Word access
       ;
  _StoreWriteAPDPReg(0, Ctrl);           // AHB-AP CSW, word access, no auto-increment
  //
  // Halt the CPU
  //
  _StoreWriteAPDPReg(1, 0xE000EDF0);     // AHB-AP TAR, DHCSR
  _StoreWriteAPDPReg(3, 0xA05F0003);     // AHB-AP DRW, DHCSR data: Key, C_DEBUGEN, C_HALT, C_MASKINTS = 0
  JTAG_WriteClocks(1);
  Report("Wait for CPU to enter debug mode");
  _StoreTriggerReadAPDPReg(3);                  // Trigger read of AHB-AP DRW
  do {
    BitPos = _StoreTriggerReadAPDPReg(3);       // Trigger read of AHB-AP DRW
    v = JTAG_GetU32(BitPos + 3);
  } while (((v >> 17) & 1) == 0);
  //
  // Get addr where to stop the device
  //
  _StoreWriteAPDPReg(1, 0x0C000004);     // AHB-AP TAR, start of application
  _StoreTriggerReadAPDPReg(3);           // Trigger read of AHB-AP DRW
  BitPos = _StoreTriggerReadAPDPReg(3);  // Trigger read of AHB-AP DRW
  ResetAddr = JTAG_GetU32(BitPos + 3);
  //
  // Enable breakpoint units
  //
  _StoreWriteAPDPReg(1, 0xE0002000);     // AHB-AP TAR
  _StoreWriteAPDPReg(3, 0x00000003);     // AHB-AP DRW, BP_CTRL: Enable breakpoint units
  //
  // Remember settings of flash patch unit 0
  // which is used to set the breakpoint on the application start
  //
  _StoreWriteAPDPReg(1, 0xE0002008);     // AHB-AP TAR
  BitPos = _StoreTriggerReadAPDPReg(3);  // Trigger read of AHB-AP DRW
  BPCompValue = JTAG_GetU32(BitPos + 3);
  //
  // Set breakpoint on reset address
  //
  ResetAddr &= 0x1FFFFFFC;
  ResetAddr |= (1 << 30);                // Breakpoint on lower half-word
  ResetAddr |= (1 << 0);                 // Enable breakpoint
  _StoreWriteAPDPReg(1, 0xE0002008);     // AHB-AP TAR
  _StoreWriteAPDPReg(3, ResetAddr);      // AHB-AP DRW
  JTAG_WriteClocks(1);                   // Make sure that JTAG buffer is empty
  //
  // Perform reset
  //
  _StoreWriteAPDPReg(1, 0xE000ED0C);     // AHB-AP TAR, AIRCR
  _StoreWriteAPDPReg(3, 0x05FA0004);     // Set SYSRESETREQ
  JTAG_WriteClocks(1);                   // Make sure that JTAG buffer is empty
  SYS_Sleep(20);                         // Give the reset some time to perform
  //
  // Wait for S_RESET_ST to be cleared
  //    
  Report("Wait for S_RESET_ST to be cleared");
  _StoreWriteAPDPReg(1, 0xE000EDF0);     // AHB-AP TAR, DHCSR
  _StoreTriggerReadAPDPReg(3);           // Trigger read of AHB-AP DRW
  do {
    BitPos = _StoreTriggerReadAPDPReg(3);           // Trigger read of AHB-AP DRW
    v = JTAG_GetU32(BitPos + 3);
  } while (((v >> 25) & 1) == 1);
  //
  // Restore settings for breakpoint unit 0
  //
  _StoreWriteAPDPReg(1, 0xE0002008);     // AHB-AP TAR
  _StoreWriteAPDPReg(3, BPCompValue);    // AHB-AP DRW, BP_CTRL: Enable breakpoint units
  _StoreWriteAPDPReg(1, 0x5000413C);     // AHB-AP TAR, PETE
  _StoreWriteAPDPReg(3, 0x00000000);     // AHB-AP DRW, PETE: Disable all parity traps
  JTAG_WriteClocks(1);                   // Make sure that JTAG buffer is empty
  JTAG_Speed = Speed;                    // Restore original JTAG speed
}

/*********************************************************************
*
*       InitTarget
*
*  Function description
*    Make sure that we can access the device
*/
void InitTarget(void) {
  Report("J-Link script: XMC4500 (Cortex-M4) J-Link script");
  JTAG_DRPre         = 0;  // Number of devices closer to TDO than the one we want to talk to
  JTAG_DRPost        = 1;  // Number of devices closer to TDI than the one we want to talk to
  JTAG_IRPre         = 0;  // Sum of IRLens of devices closer to TDO than the one we want to talk to
  JTAG_IRPost        = 8;  // Sum of IRLens of devices closer to TDI than the one we want to talk to
  JTAG_IRLen         = 4;  // IRLen of the device we want to talk to
  JTAG_AllowTAPReset = 1;
  //
  // On the first connect
  // we need to perform a reset via Reset pin with defined states of TMS and TCK to make sure that
  // the device boots up in the correct mode.
  // On all following calls of InitTarget() this is not necessary
  //
  if (MAIN_IsFirstIdentify == 1) {
    Report("J-Link script: Initialize device to avoid connection problems.");
    _ResetAndHaltOnConnect();
  }
}
